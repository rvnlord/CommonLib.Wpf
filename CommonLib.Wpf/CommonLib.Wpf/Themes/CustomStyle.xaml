<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:shared="http://metro.mahapps.com/winfx/xaml/shared"
                    xmlns:vsm ="clr-namespace:System.Windows;assembly=PresentationFramework"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:ig="http://schemas.infragistics.com/xaml" 
                    xmlns:ige="http://infragistics.com/Editors"
                    xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"
                    xmlns:system1="clr-namespace:System;assembly=System.Runtime"
                    xmlns:igWindows="http://infragistics.com/Windows"
                    xmlns:controls="clr-namespace:CommonLib.Wpf.Source.Common.Controls"
                    xmlns:wpfConverters="clr-namespace:CommonLib.Wpf.Source.Common.Converters.WpfConverters">

    <wpfConverters:HorizontalCenterAlignConverter x:Key="HorizontalCenterAlignConverter" />

    <!--#region Brushes-->

    <Color x:Key="InputDisabledForegroundColor">#FF454545</Color>
    <Color x:Key="InputReadOnlyForegroundColor">#FF808080</Color>

    <SolidColorBrush x:Key="WhiteBrush" Color="White" />
    <SolidColorBrush x:Key="MouseOverTitleBarBrush" Color="#FF000040" />
    <SolidColorBrush x:Key="DefaultWindowBrush" Color="#FF1E1E1E" />
    <SolidColorBrush x:Key="DefaultForegroundBrush" Color="#FFBABABA" />
    <SolidColorBrush x:Key="TransparentBrush" Color="#00FFFFFF" />
    <SolidColorBrush x:Key="InputDisabledBackgroundBrush" Color="#FF181818"/>
    <SolidColorBrush x:Key="InputDisabledBorderBrush" Color="#FF333333"/>
    <SolidColorBrush x:Key="InputDisabledForegroundBrush" Color="{StaticResource InputDisabledForegroundColor}"/>
    <SolidColorBrush x:Key="InputReadOnlyForegroundBrush" Color="{StaticResource InputReadOnlyForegroundColor}"/>

    <!--#endregion-->

    <!--#region Window-->

    <LinearGradientBrush x:Key="pbBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#323232" Offset="0.0" />
        <GradientStop Color="Black" Offset="1.0" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="pbForegroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="Green" Offset="0.0" />
        <GradientStop Color="Black" Offset="1.0" />
    </LinearGradientBrush>

    <Style x:Key="MyCleanWindowStyle" 
           TargetType="{x:Type mah:MetroWindow}" BasedOn="{StaticResource {x:Type Window}}" >
        <Setter Property="NonActiveWindowTitleBrush" Value="{DynamicResource MahApps.Brushes.Transparent}" />
        <Setter Property="TitleForeground" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />

        <Setter Property="TitleCharacterCasing" Value="Normal"/>
        <Setter Property="IconEdgeMode" Value="Aliased"/>
        <Setter Property="TitleAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="12" />
        <Setter Property="WindowTitleBrush" Value="{StaticResource MouseOverTitleBarBrush}"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
    </Style>

    <!--#endregion-->

    <!--#region DataGrid-->

    <LinearGradientBrush x:Key="HeaderRowBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF000096" Offset="0.0" />
        <GradientStop Color="Black" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="RowBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF000040" Offset="0.0" />
        <GradientStop Color="Black" Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="BorderBrush" Color="#FF000096" />
    <LinearGradientBrush x:Key="RowSelectedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF909000" Offset="0.0" />
        <GradientStop Color="Black" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="RowMouseOverBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF606000" Offset="0.0" />
        <GradientStop Color="Black" Offset="1.0" />
    </LinearGradientBrush>

    <Style BasedOn="{StaticResource MahApps.Styles.DataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="mah:ControlsHelper.ContentCharacterCasing" Value="Normal"/>
        <Setter Property="Background" Value="{StaticResource HeaderRowBrush}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,0,4,0" />
        <Setter Property="BorderThickness" Value="0,0,0,0" />
        <Setter Property="Height" Value="25" />
        <Setter Property="MaxHeight" Value="25" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="SortDirection" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource RowSelectedBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource WhiteBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyRowStyle" BasedOn="{StaticResource MahApps.Styles.DataGridRow}" TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <!--  IsSelected  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="mah:DataGridHelper.SelectionUnit" Value="FullRow" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource RowSelectedBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource RowSelectedBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}" />
            </MultiTrigger>

            <!--  IsSelected and Selector.IsSelectionActive (Inactive Selection) -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="mah:DataGridHelper.SelectionUnit" Value="FullRow" />
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource RowSelectedBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource RowSelectedBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightTextBrush}" />
            </MultiTrigger>

            <!--  IsMouseOver  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="mah:DataGridHelper.SelectionUnit" Value="FullRow" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource RowMouseOverBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource RowMouseOverBrush}" />
            </MultiTrigger>

            <!--  IsEnabled  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="mah:DataGridHelper.SelectionUnit" Value="FullRow" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </MultiTrigger>

            <!--  IsEnabled and IsSelected (Disabled Highlight)  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="mah:DataGridHelper.SelectionUnit" Value="FullRow" />
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource RowSelectedBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource RowSelectedBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}" />
            </MultiTrigger>

        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource MahApps.Styles.DataGrid}" TargetType="{x:Type DataGrid}">
        <Setter Property="mah:ControlsHelper.ContentCharacterCasing" Value="Normal"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="RowHeight" Value="25" />
        <Setter Property="RowBackground" Value="{StaticResource RowBrush}" />
        <Setter Property="RowStyle" Value="{StaticResource MyRowStyle}" />
    </Style>

    <Style x:Key="CenterAlignedCellStyle" BasedOn="{StaticResource MahApps.Styles.DataGridCell}" TargetType="{x:Type DataGridCell}">
        <Style.Setters>
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="TextBlock.TextAlignment" Value="Center" />
            <Setter Property="BorderThickness" Value="0,0,1,0" />
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}" />
            <Setter Property="Padding" Value="0,0,0,0" />
            <Setter Property="Margin" Value="0,0,0,0" />
        </Style.Setters>
    </Style>

    <Style BasedOn="{StaticResource CenterAlignedCellStyle}" 
           TargetType="{x:Type DataGridCell}">
    </Style>

    <Style x:Key="LeftAlignedCellStyle" BasedOn="{StaticResource CenterAlignedCellStyle}" 
           TargetType="{x:Type DataGridCell}">
        <Style.Setters>
            <Setter Property="TextBlock.TextAlignment" Value="Left" />
            <Setter Property="Padding" Value="5,0,0,0" />
        </Style.Setters>
    </Style>

    <Style x:Key="RightAlignedCellStyle" BasedOn="{StaticResource CenterAlignedCellStyle}" 
           TargetType="{x:Type DataGridCell}">
        <Style.Setters>
            <Setter Property="TextBlock.TextAlignment" Value="Right" />
            <Setter Property="Padding" Value="0,0,5,0" />
        </Style.Setters>
    </Style>

    <Style x:Key="IconCellStyle" TargetType="iconPacks:PackIconMaterial">
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="18" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <!--#endregion-->

    <!--#region Label-->

    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <!--#endregion-->

    <!--#region Contextmenu (Default Unused)-->

    <ContextMenu x:Key="emptyContextMenu" Width="0" Height="0" Visibility="Collapsed">
    </ContextMenu>

    <!--#endregion-->

    <!--#region TextBox-->

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Background" Value="{StaticResource TextBoxBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorderBrush}" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="6,4" />
        <Setter Property="SelectionBrush" Value="{StaticResource TextBoxFocusedBrush}" />
        <Setter Property="SelectionOpacity" Value="0.4" />
        <Setter Property="CaretBrush" Value="{StaticResource CaretForegroundBrush}"/>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource TextBoxValidationToolTipTemplate}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid x:Name="RootElement" SnapsToDevicePixels="True">
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="Bd">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TextBoxHoverBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Background" Storyboard.TargetName="Bd">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TextBoxHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border x:Name="DisabledVisualElement" BorderBrush="{StaticResource InputDisabledBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource InputDisabledBackgroundBrush}" IsHitTestVisible="False" Opacity="0"></Border>
                        <Border x:Name="ReadOnlyVisualElement" BorderBrush="{StaticResource InputDisabledBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource InputDisabledBackgroundBrush}" Opacity="0" />
                        <Border>
                            <ScrollViewer x:Name="PART_ContentHost" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Opacity" Value="1" TargetName="ReadOnlyVisualElement" />
                            <Setter Property="Foreground" Value="{StaticResource InputReadOnlyForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="1" TargetName="DisabledVisualElement" />
                            <Setter Property="Foreground" Value="{StaticResource InputDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region PasswordBox -->

    <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource PasswordBoxStyle}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{StaticResource PasswordBoxForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource TextBoxBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="6,4" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="SelectionBrush" Value="{StaticResource TextBoxFocusedBrush}" />
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="CaretBrush" Value="{StaticResource CaretForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="Bd">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TextBoxHoverBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Background" Storyboard.TargetName="Bd">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TextBoxHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <!-- alternative for a trigger -->
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border x:Name="DisabledVisualElement" BorderBrush="{StaticResource InputDisabledBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource InputDisabledBackgroundBrush}" IsHitTestVisible="False" Opacity="0"></Border>
                        <Border x:Name="ReadOnlyVisualElement" Background="{StaticResource InputDisabledBackgroundBrush}" Opacity="0" />
                        <Border>
                            <ScrollViewer x:Name="PART_ContentHost" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="1" TargetName="DisabledVisualElement" />
                            <Setter Property="Foreground" Value="{StaticResource InputDisabledForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TextBoxHoverBorderBrush}" TargetName="Bd" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TextBoxFocusedBrush}" TargetName="Bd" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region RadioButton-->

    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="MinHeight" Value="0" />
    </Style>

    <!--#endregion-->

    <!--#region CheckBox-->

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Foreground" Value="{StaticResource DefaultForegroundBrush}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="hover" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressed" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".55" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" />
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="disabled" />
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="CheckStates">
                                <vsm:VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="checkBox" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Unchecked" />
                                <vsm:VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck" />
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="FocusStates">
                                <vsm:VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="focused" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Unfocused" />
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="ValidationStates">
                                <vsm:VisualState x:Name="Valid" />
                                <vsm:VisualState x:Name="InvalidUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="invalidUnfocused" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="InvalidFocused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="invalidFocused" />
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="18" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Rectangle Fill="{StaticResource TransparentBrush}" />
                        <Rectangle x:Name="normal" Opacity="1" Stroke="{StaticResource CheckBoxBorderBrush}" StrokeThickness="1" Fill="{StaticResource CheckBoxBackgroundBrush}" Width="18" Height="18" />
                        <Rectangle x:Name="hover" Stroke="{StaticResource CheckBoxHoverBorderBrush}" StrokeThickness="1" Fill="{StaticResource CheckBoxHoverBackgroundBrush}" Opacity="0" Width="18" Height="18" />
                        <Rectangle x:Name="pressed" Opacity="0" Stroke="{StaticResource CheckBoxPressedBorderBrush}" StrokeThickness="1" Fill="{StaticResource CheckBoxPressedBackgroundBrush}" Width="18" Height="18" />
                        <Rectangle x:Name="focused" Opacity="0" Stroke="{StaticResource CheckBoxFocusedBorderBrush}" StrokeThickness="1" Fill="{StaticResource CheckBoxFocusedBackgroundBrush}" Width="18" Height="18" />
                        <Rectangle x:Name="invalidUnfocused" Opacity="0" Stroke="{StaticResource CheckBoxInvalidUnfocusedBackgroundBrush}" StrokeThickness="1" Fill="{StaticResource CheckBoxInvalidUnfocusedBackgroundBrush}" Width="18" Height="18" />
                        <Rectangle x:Name="invalidFocused" Opacity="0" Stroke="{StaticResource CheckBoxInvalidFocusedBorderBrush}" StrokeThickness="1" Fill="{StaticResource CheckBoxInvalidFocusedBackgroundBrush}" Width="18" Height="18" />
                        <Path x:Name="checkBox" Height="10" Width="12" Stretch="Fill" Opacity="0" Data="M 1145.607177734375,430 C1145.607177734375,430 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1138,434.5538330078125 1138,434.5538330078125 1138,434.5538330078125 1141.482177734375,438 1141.482177734375,438 1141.482177734375,438 1141.96875,437.9375 1141.96875,437.9375 1141.96875,437.9375 1147,431.34619140625 1147,431.34619140625 1147,431.34619140625 1145.607177734375,430 1145.607177734375,430 z" Fill="{StaticResource CheckBoxCheckBackgroundBrush}" UseLayoutRounding="False" />
                        <Rectangle x:Name="IndeterminateCheck" Fill="{StaticResource CheckBoxIndeterminateCheckBackgroundBrush}" Height="3" Width="8" Opacity="0" />
                        <Rectangle x:Name="disabled" Opacity="0" StrokeThickness="1" Fill="{StaticResource DisabledVisualElement}" Width="18" Height="18" />
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" Margin="{TemplateBinding Padding}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Button-->

    <Style BasedOn="{StaticResource ButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style x:Key="MyMahButtonStyle" BasedOn="{StaticResource MahApps.Styles.Button.Square}" TargetType="{x:Type ButtonBase}">
        <Setter Property="mah:ControlsHelper.ContentCharacterCasing" Value="Normal" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style x:Key="MyMahAccentedButtonStyle" BasedOn="{StaticResource MahApps.Styles.Button.Square.Accent}" TargetType="{x:Type ButtonBase}">
        <Setter Property="mah:ControlsHelper.ContentCharacterCasing" Value="Normal" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style x:Key="MyClearButtonStyle" BasedOn="{StaticResource MahApps.Styles.Button.Chromeless}" TargetType="{x:Type Button}">
        <Setter Property="mah:ControlsHelper.ContentCharacterCasing" Value="Normal" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <!--#endregion-->

    <!--#region ComboBox-->

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Width" Value="120"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
        <Setter Property="Padding" Value="3,3" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <!--#endregion-->

    <!--#region ListBox-->

    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Width" Value="120"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="3,3" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <!--#endregion-->

    <!--#region MahTabItem-->

    <Style TargetType="{x:Type mah:MetroTabItem}">
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type mah:MetroTabItem}">
                    <Border
                        x:Name="Spacer"
                        Width="Auto"
                        Height="Auto"
                        Padding="0 0 0 0"
                        Margin="0 0 0 0"
                        BorderBrush="Transparent"
                        BorderThickness="0">
                        <Border
                            x:Name="Border"
                            BorderThickness="0,0,0,0"
                            CornerRadius="0,0,0,0"
                            Cursor="Hand"
                            VerticalAlignment="Top">
                            <ContentPresenter
                                x:Name="ContentSite"
                                TextElement.FontSize="14pt"
                                TextElement.FontFamily="Arial"
                                TextElement.Foreground="White"
                                VerticalAlignment="Top"
                                HorizontalAlignment="Left"
                                ContentSource="Header"
                                Margin="0,0,0,0"
                                Width="Auto"
                                Height="Auto" 
                                Cursor="Arrow" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region MahTile-->

    <Style x:Key="BaseTile" TargetType="{x:Type mah:Tile}">
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="mah:ControlsHelper.MouseOverBorderBrush" Value="{x:Null}" />
        <!-- xaml serializer nie poradzi sobie z helperem -->
        <Setter Property="CountFontSize" Value="28" />
        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
        <Setter Property="Margin" Value="0,0,10,10" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="TitleFontSize" Value="16" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Width" Value="50" />
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="mah:Tile">
                    <Grid>
                        <Border x:Name="PART_Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid>
                                <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            Orientation="Horizontal">
                                    <ContentPresenter RecognizesAccessKey="True" />
                                    <TextBlock VerticalAlignment="Center"
                                               FontSize="{TemplateBinding CountFontSize}"
                                               Text="{TemplateBinding Count}" />
                                </StackPanel>
                                <Label HorizontalAlignment="{TemplateBinding HorizontalTitleAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalTitleAlignment}"
                                       Foreground="{TemplateBinding Foreground}">
                                    <AccessText Margin="3"
                                                FontSize="{TemplateBinding TitleFontSize}"
                                                Foreground="{TemplateBinding Foreground}"
                                                Text="{TemplateBinding Title}"
                                                TextWrapping="Wrap" />
                                </Label>
                            </Grid>
                        </Border>
                        <Border x:Name="PART_HoverBorder"
                                BorderBrush="{TemplateBinding mah:ControlsHelper.MouseOverBorderBrush}"
                                BorderThickness="2"
                                Opacity="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(mah:ControlsHelper.MouseOverBorderBrush), Mode=OneWay, Converter={x:Static shared:IsNullConverter.Instance}}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver, Mode=OneWay}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HoverBorder" Property="Opacity" Value="0.6" />
                        </MultiDataTrigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0.5"
                                                    CenterY="0.5"
                                                    ScaleX="0.98"
                                                    ScaleY="0.98" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseTileIcon" TargetType="iconPacks:PackIconModern">
        <Setter Property="Width" Value="25" />
        <Setter Property="Height" Value="25" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="12.5,12.5,0,0" />
    </Style>

    <Style x:Key="BaseTileIconEntypo" TargetType="iconPacks:PackIconEntypo">
        <Setter Property="Width" Value="25" />
        <Setter Property="Height" Value="25" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="12.5,12.5,0,0" />
    </Style>

    <Style x:Key="BaseTileTextBlock" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="50,0,0,0" />
    </Style>

    <Style x:Key="GridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <!-- Main Menu Tile -->

    <SolidColorBrush x:Key="MouseOverMainMenuTileBrush" Color="#FF000096" />
    <SolidColorBrush x:Key="DefaultMainMenuTileBrush" Color="#FF000040" />

    <Style x:Key="MainMenuTile" TargetType="mah:Tile" BasedOn="{StaticResource BaseTile}">
        <Setter Property="Background" Value="{StaticResource DefaultMainMenuTileBrush}" />
    </Style>
    <Style x:Key="MainMenuIcon" TargetType="iconPacks:PackIconModern" BasedOn="{StaticResource BaseTileIcon}" />
    <Style x:Key="MainMenuTextblock" TargetType="TextBlock" BasedOn="{StaticResource BaseTileTextBlock}" />

    <!-- Main Menu Resize Tile -->

    <SolidColorBrush x:Key="MouseOverMainMenuResizeTileBrush" Color="DarkRed" />
    <SolidColorBrush x:Key="DefaultMainMenuResizeTileBrush" Color="#FF1E1E1E" />

    <Style x:Key="MainMenuResizeTile" TargetType="mah:Tile" BasedOn="{StaticResource BaseTile}">
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Background" Value="{StaticResource DefaultMainMenuResizeTileBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Top"/>
    </Style>

    <Style x:Key="MainMenuResizeIcon" TargetType="iconPacks:PackIconModern" BasedOn="{StaticResource BaseTileIcon}">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="Margin" Value="17.5,7.5,0,0" />
    </Style>

    <!-- Flyout Header Tile -->

    <SolidColorBrush x:Key="MouseOverFlyoutHeaderTileBrush" Color="#FF000096" />
    <SolidColorBrush x:Key="DefaultFlyoutHeaderTileBrush" Color="#FF000030" />
    <SolidColorBrush x:Key="DefaultFlyoutHeaderIconBrush" Color="#FF000000" />

    <Style x:Key="FlyoutHeaderTile" TargetType="mah:Tile" BasedOn="{StaticResource BaseTile}">
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Width" Value="260" />
        <Setter Property="Background" Value="{StaticResource DefaultFlyoutHeaderTileBrush}" />
    </Style>

    <Style x:Key="FlyoutHeaderArrow" TargetType="iconPacks:PackIconEntypo" BasedOn="{StaticResource BaseTileIconEntypo}">
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Margin" Value="5,5,0,0" />
        <Setter Property="Kind" Value="ChevronWithCircleLeft" />
    </Style>

    <Style x:Key="FlyoutHeaderIcon" TargetType="iconPacks:PackIconModern" BasedOn="{StaticResource BaseTileIcon}">
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Padding" Value="12.5" />
        <Setter Property="Margin" Value="50,0,0,0" />
        <Setter Property="Background" Value="{StaticResource DefaultFlyoutHeaderIconBrush}" />
    </Style>

    <Style x:Key="FlyoutHeaderTextblock" TargetType="TextBlock" BasedOn="{StaticResource BaseTileTextBlock}">
        <Setter Property="Margin" Value="110,0,0,0" />
    </Style>

    <!-- Main Grid Tab Tile -->

    <SolidColorBrush x:Key="MouseOverMainGridTabTileBrush" Color="#FF888800" />
    <SolidColorBrush x:Key="DefaultMainGridTabTileBrush" Color="#FF404000" />
    <Style x:Key="MainGridTabTile" TargetType="mah:Tile" BasedOn="{StaticResource BaseTile}">
        <Setter Property="Width" Value="200" />
        <Setter Property="Background" Value="{StaticResource DefaultMainGridTabTileBrush}" />
    </Style>
    <Style x:Key="MainGridTabIcon" TargetType="iconPacks:PackIconModern" BasedOn="{StaticResource BaseTileIcon}" />
    <Style x:Key="MainGridTabTextblock" TargetType="TextBlock" BasedOn="{StaticResource BaseTileTextBlock}" />

    <!-- Database Tab Tile -->

    <SolidColorBrush x:Key="MouseOverDatabaseTabTileBrush" Color="#FF963E00" />
    <SolidColorBrush x:Key="DefaultDatabaseTabTileBrush" Color="#FF962D00" />
    <Style x:Key="DatabaseTabTile" TargetType="mah:Tile" BasedOn="{StaticResource BaseTile}">
        <Setter Property="Width" Value="200" />
        <Setter Property="Background" Value="{StaticResource DefaultDatabaseTabTileBrush}" />
    </Style>
    <Style x:Key="DatabaseTabIcon" TargetType="iconPacks:PackIconModern" BasedOn="{StaticResource BaseTileIcon}"/>
    <Style x:Key="DatabaseTabTextblock" TargetType="TextBlock" BasedOn="{StaticResource BaseTileTextBlock}"/>

    <!-- Options Tab Tile -->

    <SolidColorBrush x:Key="MouseOverOptionsTabTileBrush" Color="#FF009600" />
    <SolidColorBrush x:Key="DefaultOptionsTabTileBrush" Color="#FF003A00" />
    <Style x:Key="OptionsTabTile" TargetType="mah:Tile" BasedOn="{StaticResource BaseTile}">
        <Setter Property="Width" Value="200" />
        <Setter Property="Background" Value="{StaticResource DefaultOptionsTabTileBrush}" />
    </Style>
    <Style x:Key="OptionsTabIcon" TargetType="iconPacks:PackIconModern" BasedOn="{StaticResource BaseTileIcon}" />
    <Style x:Key="OptionsTabTextblock" TargetType="TextBlock" BasedOn="{StaticResource BaseTileTextBlock}" />

    <!-- Context Menu Tiles -->

    <SolidColorBrush x:Key="MouseOverContextMenuItemTileBrush" Color="#FF000096" />
    <SolidColorBrush x:Key="DefaultContextMenuItemTileBrush" Color="#FF000040" />
    <SolidColorBrush x:Key="DefaultContextMenuStackPanelBtush" Color="#FF000000" />

    <Style x:Key="ContextMenuItemTile" TargetType="mah:Tile" BasedOn="{StaticResource BaseTile}">
        <Setter Property="Width" Value="200" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Background" Value="{StaticResource DefaultContextMenuItemTileBrush}" />
        <Setter Property="Margin" Value="2,2,2,2" />
        <Setter Property="FontSize" Value="12" />
    </Style>

    <Style x:Key="ContextMenuItemIcon" TargetType="iconPacks:PackIconModern" BasedOn="{StaticResource BaseTileIcon}">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="Margin" Value="7.5,7.5,0,0" />
    </Style>

    <Style x:Key="ContextMenuItemTextblock" TargetType="TextBlock" BasedOn="{StaticResource BaseTileTextBlock}">
        <Setter Property="Margin" Value="30,0,0,0" />
    </Style>

    <Style x:Key="ContextMenuStackPanel" TargetType="StackPanel">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Orientation" Value="Vertical" />
        <Setter Property="Background" Value="{StaticResource DefaultContextMenuStackPanelBtush}" />
    </Style>

    <!--#endregion-->

    <!-- #region Tilesmenu -->

    <DataTemplate x:Key="TilesMenuOptionTileDataTemplate">
        <Grid>
            <iconPacks:PackIconModern Kind="{Binding Icon, RelativeSource={RelativeSource FindAncestor, 
                AncestorType={x:Type controls:TilesMenuOption}}}" Style="{StaticResource BaseTileIcon}" />
            <TextBlock Text="{Binding Description, RelativeSource={RelativeSource FindAncestor, 
                AncestorType={x:Type controls:TilesMenuOption}}}" Style="{StaticResource BaseTileTextBlock}" />
        </Grid>
    </DataTemplate>

    <!--#endregion-->

    <!-- #region XamBusyIndicator -->

    <Style x:Key="XamBusyIndicatorOverlayStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Opacity" Value="1" />
        <Setter Property="Fill" Value="Transparent" />
    </Style>

    <Style TargetType="{x:Type ig:XamBusyIndicator}" BasedOn="{StaticResource {x:Type ig:XamBusyIndicator}}">
        <Setter Property="IsBusy" Value="True"></Setter>
        <Setter Property="IsIndeterminate" Value="True"></Setter>
        <Setter Property="Animation" Value="Azure"></Setter>
        <Setter Property="Height" Value="100"></Setter>
        <Setter Property="Width" Value="100"></Setter>
        <Setter Property="OverlayStyle" Value="{StaticResource XamBusyIndicatorOverlayStyle}"></Setter>
        <Style.Resources>
            <Style TargetType="{x:Type igPrim:AzureBusyAnimationPresenter}">
                <Setter Property="Height" Value="90" />
                <Setter Property="Width" Value="90" />
            </Style>
        </Style.Resources>
    </Style>

    <!-- #endregion -->

    <!--#region xamRadialGauge-->

    <Style TargetType="{x:Type ig:XamRadialGauge}" BasedOn="{StaticResource {x:Type ig:XamRadialGauge}}">
        <Setter Property="Value" Value="75" />
        <Setter Property="BackingOutline" Value="Blue"></Setter>
        <Setter Property="BackingStrokeThickness" Value="2"></Setter>
        <Setter Property="NeedleEndExtent" Value="0.55"></Setter>
        <Setter Property="MinorTickStartExtent" Value="0.6"></Setter>
        <Setter Property="MinorTickEndExtent" Value="0.62"></Setter>
        <Setter Property="TickStartExtent" Value="0.6"></Setter>
        <Setter Property="TickEndExtent" Value="0.65"></Setter>
        <Setter Property="LabelExtent" Value="0.8"></Setter>
        <Setter Property="BackingOuterExtent" Value="0.99"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="Height" Value="150"></Setter>
        <Setter Property="Width" Value="150"></Setter>
        <Setter Property="ScaleStartExtent" Value="0"></Setter>
        <Setter Property="ScaleEndExtent" Value="0"></Setter>
    </Style>

    <!--#endregion-->

    <!--#region XamNumericEditor-->

    <Style TargetType="{x:Type ige:XamNumericEditor}" BasedOn="{StaticResource {x:Type ige:XamNumericEditor}}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="ContextMenu" Value="{StaticResource emptyContextMenu}" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="Mask" Value="{}n"></Setter>
        <Setter Property="InvalidValueBehavior" Value="Default"></Setter>
    </Style>

    <!--#endregion-->

    <!--#region XamCurrencyEditor-->

    <Style TargetType="{x:Type ige:XamCurrencyEditor}" BasedOn="{StaticResource {x:Type ige:XamCurrencyEditor}}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="ContextMenu" Value="{StaticResource emptyContextMenu}" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="Mask" Value="{}nnnn.nnnnnnnn EX\C"></Setter>
        <Setter Property="InvalidValueBehavior" Value="Default"></Setter>
    </Style>

    <!--#endregion-->

    <!--#region XamDateTimeEditor-->

    <Style TargetType="{x:Type ige:XamDateTimeEditor}" BasedOn="{StaticResource {x:Type ige:XamDateTimeEditor}}">
        <Setter Property="DataMode" Value="IncludeBoth" />
        <Setter Property="Mask" Value="{}dd\-mm\-yyyy" />
        <Setter Property="Format" Value="{}dd-MM-yyyy" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="3,3" />
        <Setter Property="ContextMenu" Value="{StaticResource emptyContextMenu}" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
    </Style>

    <!--#endregion-->

    <!--#region XamTextEditor -->

    <Style TargetType="{x:Type ige:XamTextEditor}" BasedOn="{StaticResource {x:Type ige:XamTextEditor}}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ige:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            >
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="MainBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TextBoxHoverBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Background" Storyboard.TargetName="MainBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TextBoxHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <igWindows:SimpleTextBlock x:Name="TextBlock"
                                                   Text="{TemplateBinding DisplayText}"
                                                   TextWrapping="{TemplateBinding TextWrapping}"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   TextAlignment="{TemplateBinding TextAlignmentResolved}"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   Margin="{TemplateBinding Padding}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ige:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                        <TextBox Name="PART_FocusSite"
                                 MinHeight="0"
                                 AcceptsReturn="{TemplateBinding AcceptsReturn}"
                                 AcceptsTab="{TemplateBinding AcceptsTab}"
                                 TextWrapping="{TemplateBinding TextWrapping}"
                                 HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                 VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 TextAlignment="{TemplateBinding TextAlignmentResolved}"
                                 IsReadOnly="{TemplateBinding ReadOnly}"
                                 MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}"
                                 Background="Transparent" Padding="0" Margin="0"
                                 BorderBrush="Transparent"
                                 BorderThickness="0,0,0,0"
                                 ContextMenu="{TemplateBinding ContextMenu}"
                                 SpellCheck.IsEnabled="{TemplateBinding SpellCheck.IsEnabled}"
                                 SpellCheck.SpellingReform="{TemplateBinding SpellCheck.SpellingReform}"
                                 InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                 InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                 InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
                                 FontSize="{TemplateBinding FontSize}"
                                 Foreground="{TemplateBinding Foreground}"
                                 SelectionBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ige:XamTextEditor}, ResourceId=SelectionBrush}}"
                                 SelectionOpacity="0.4"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="True">
                            <Setter TargetName="MainBorder" Property="Padding" 
                                    Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="PART_FocusSite" Property="Margin" 
                                    Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource XamTextEditorMarginConverter}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource EditorsBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource EditorsFocusBorderBrush}"/>
                <Setter Property="BorderThickness" Value="1,1,0,0"/>
                <Setter Property="Padding" Value="6,4"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static ige:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
                <Setter Property="Background" Value="{StaticResource EditorsHoverBackgroundBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEmbedded" Value="False">
                <!-- JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false  -->
                <Setter Property="Background" Value="{StaticResource EditorsBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static ige:EditorsBrushKeys.EditorsNormalBorderFillKey}}"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                <Setter Property="FontSize" Value="14.667"/>
                <Setter Property="Padding" Value="6,4"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource EditorsFocusBorderBrush}" />
                <Setter Property="Padding" Value="6,4"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ige:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ige:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ige:XamTextEditor}, ResourceId=EditorsDisabledForeground}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

</ResourceDictionary>